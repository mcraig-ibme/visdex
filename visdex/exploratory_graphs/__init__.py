"""
visdex: Exploratory graphs

The exploratory graphs section defines specialised data visualisations that
can be generated by the user on request
"""
import logging

from dash import html, dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State, MATCH
import plotly.graph_objects as go

from . import (
    bar_graph,
    histogram_graph,
    manhattan_graph,
    scatter_graph,
    violin_graph,
)

from visdex.common import standard_margin_left, div_style, all_components, style_dict

LOG = logging.getLogger(__name__)

def get_layout(app):

    @app.callback(
        [
            Output("explore-collapse", "is_open"),
            Output("collapse-explore-button", "children"),
        ],
        [Input("collapse-explore-button", "n_clicks")],
        [State("explore-collapse", "is_open")],
        prevent_initial_call=True,
    )
    def toggle_collapse_explore(n, is_open):
        """
        Handle click on the 'Explore' expand/collapse button
        """
        LOG.info(f"toggle_collapse_explore {n} {is_open}")
        if n:
            return not is_open, "+" if is_open else "-"
        return is_open, "-"

    @app.callback(
        Output("graph-group-container", "children"),
        [Input("add-graph-button", "n_clicks")],
        [State("graph-group-container", "children")],
        prevent_initial_call=True,
    )
    def add_graph_group(n_clicks, children):
        # Add a new graph group each time the button is clicked. The if None guard stops
        # there being an initial graph.
        LOG.info(f"add_graph_group")
        if n_clicks is not None:
            # This dropdown controls what type of graph-group to display next to it.
            new_graph_type_dd = html.Div(
                [
                    "Graph type:",
                    dcc.Dropdown(
                        id={"type": "graph-type-dd", "index": n_clicks},
                        options=[
                            {"label": str(value).capitalize(), "value": value}
                            for value in all_components.keys()
                        ],
                        value="scatter",
                        style={"width": "50%"},
                    ),
                    # This is a placeholder for the 'filter-graph-group-scatter' or
                    # 'filter-graph-group-bar' to be placed here.
                    # Because graph-type-dd above is set to Scatter, this will initially be
                    # automatically filled with a filter-graph-group-scatter.
                    # But on the initial generation of this object, we give it type
                    # 'placeholder' to make it easy to check its value in
                    # change_graph_group_type()
                    html.Div(id={"type": "placeholder", "index": n_clicks}),
                ],
                id={"type": "divgraph-type-dd", "index": n_clicks},
                style=div_style,
            )

            children.append(new_graph_type_dd)

        return children

    @app.callback(
        Output({"type": "divgraph-type-dd", "index": MATCH}, "children"),
        [Input({"type": "graph-type-dd", "index": MATCH}, "value")],
        [
            State({"type": "graph-type-dd", "index": MATCH}, "id"),
            State({"type": "divgraph-type-dd", "index": MATCH}, "children"),
        ],
    )
    def change_graph_group_type(graph_type, id, children):
        LOG.info(f"change_graph_group_type {graph_type} {id}")
        # Generate a new group of the right type.
        if "filter-graph-group-" + str(graph_type) != children[-1]["props"]["id"]["type"]:
            children[-1] = generate_generic_group(id["index"], graph_type)
        return children

    bar_graph.define_cbs(app)
    histogram_graph.define_cbs(app)
    manhattan_graph.define_cbs(app)
    scatter_graph.define_cbs(app)
    violin_graph.define_cbs(app)

    return html.Div(children=[
        html.Div(
            [
                html.H1(
                    "Exploratory graphs",
                    style={
                        "display": "inline-block",
                        "margin-top": "10px",
                        "margin-bottom": "10px",
                        "margin-left": standard_margin_left,
                    },
                ),
                dbc.Button(
                    "-",
                    id="collapse-explore-button",
                    style={
                        "display": "inline-block",
                        "margin-left": "10px",
                        "width": "40px",
                    },
                ),
            ],
        ),
        dbc.Collapse(
            id="explore-collapse",
            children=[
                # Container to hold all the exploratory graphs
                html.Div(id="graph-group-container", children=[]),
                # Button at the page bottom to add a new graph
                html.Button(
                    "New Graph",
                    id="add-graph-button",
                    style={
                        "margin-top": "10px",
                        "margin-left": standard_margin_left,
                        "margin-bottom": "40px",
                    },
                ),
            ],
            is_open=True,
        ),
    ])

def generate_generic_group(n_clicks, group_type):
    """
    The generic builder for each of the component types.
    :param n_clicks:
    :param group_type:
    :param component_list:
    :return:
    """
    LOG.info(f"generate_generic_group {group_type}")
    children = list()

    component_list = all_components[group_type]
    for component in component_list:
        name = component["id"]
        args_to_replicate = dict(component)
        del args_to_replicate["component_type"]
        del args_to_replicate["id"]
        del args_to_replicate["label"]

        # Generate each component with the correct id, index, and arguments, inside its
        # own Div.
        children.append(
            html.Div(
                [
                    component["label"] + ":",
                    component["component_type"](
                        id={"type": group_type + "-" + name, "index": n_clicks},
                        **args_to_replicate,
                    ),
                ],
                id={"type": "div-" + group_type + "-" + name, "index": n_clicks},
                style=style_dict,
            )
        )

    children.append(
        dcc.Graph(
            id={"type": "gen-" + group_type + "-graph", "index": n_clicks},
            figure=go.Figure(data=go.Scatter()),
        )
    )
    LOG.debug(f"{children}")

    return html.Div(
        id={"type": "filter-graph-group-" + group_type, "index": n_clicks},
        children=children,
    )
